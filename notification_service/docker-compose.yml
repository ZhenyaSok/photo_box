version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - .:/app:rw
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - redis
      - db

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app:rw
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped
    command: >
      sh -c "
        sleep 10 &&
        celery -A config worker --pool=solo --loglevel=info
      "
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    links:
      - redis
      - db

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app:rw
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    restart: unless-stopped
    command: >
      sh -c "
        sleep 15 &&
        celery -A config beat --loglevel=info
      "
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    links:
      - redis
      - db

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-notifications}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: